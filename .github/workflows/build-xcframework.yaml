name: "Build xcframework"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  workflow_dispatch:
  push:
    tags:
      - 'v**'
      - 'alpha-**'
      - 'beta-**'
      - 'rc-**'
  
env:
  ver_type: alpha
  major: 0
  minor: 0
  patch: 0
  build: 1
  version: '0.0.0'
  product_version: 'v0.0.0'
  CI_BRANCH: ${{ github.ref_name }}

jobs:
  build_with_signing:
    runs-on: macos-15
    defaults:
      run:
        shell: bash
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          FRAMEWORK_NAME: "ImageDataPicker"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH      

      - name: build archive
        run: |
          FRAMEWORK_NAME="ImageDataPicker"
          # Cleaning the workspace cache
          xcodebuild \
              clean \
              -project "${FRAMEWORK_NAME}/${FRAMEWORK_NAME}".xcodeproj \
              -scheme ${FRAMEWORK_NAME}

          destinations=('iOS' 'iOS Simulator' 'macOS')
          archives=""

          # Create an archive for iOS devices
          for destination in "${destinations[@]}"; do
            echo "Creating archive for ${destination}..."

            output_archive=$(echo "${destination}" | tr ' ' '_')
            
            xcodebuild \
                archive \
                SKIP_INSTALL=NO \
                BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                -project "${FRAMEWORK_NAME}/${FRAMEWORK_NAME}".xcodeproj \
                -scheme ${FRAMEWORK_NAME} \
                -configuration Release \
                -destination "generic/platform=${destination}" \
                -archivePath $RUNNER_TEMP/build/${FRAMEWORK_NAME}-${output_archive}.xcarchive
    
            archives="${archives} -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-${output_archive}.xcarchive -framework ${FRAMEWORK_NAME}.framework"
          done
        

      - name: build archive
        env:
          FRAMEWORK_NAME: "ImageDataPicker"
        run: |
          # Convert the archives to .framework
          # and package them both into one xcframework
          xcodebuild \
          -create-xcframework \
          -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-iOS.xcarchive -framework ${FRAMEWORK_NAME}.framework \
          -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-iOS_Simulator.xcarchive -framework ${FRAMEWORK_NAME}.framework \
          -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-macOS.xcarchive -framework ${FRAMEWORK_NAME}.framework \
          -output $RUNNER_TEMP/framework/${FRAMEWORK_NAME}.xcframework
          
      - name: Update XCFramework Info.plist
        run: |
          echo "Updating Info.plist for xcframework...(this step is optional)"
          # Update the Info.plist file for the xcframework
          #
          # Uncomment the following lines to modify the Info.plist file prior to signing.
          # However, the following keys are not required for the xcframework bundle type.
          #
          # plutil -insert CFBundleName -string ImageDataPicker ${CI_WORKSPACE_PATH}/framework/${FRAMEWORK_NAME}.xcframework/Info.plist
          # plutil -insert CFBundleShortVersionString -string $major.$minor.$patch ${CI_WORKSPACE_PATH}/framework/${FRAMEWORK_NAME}.xcframework/Info.plist
          # plutil -insert CFBundleVersion -string $major.$minor.$patch ${CI_WORKSPACE_PATH}/framework/${FRAMEWORK_NAME}.xcframework/Info.plist
          # plutil -insert CFBundleIdentifier -string com.technistic.ImageDataPicker ${CI_WORKSPACE_PATH}/framework/${FRAMEWORK_NAME}.xcframework/Info.plist
          # plutil -insert CFBundleExecutable -string ImageDataPicker ${CI_WORKSPACE_PATH}/framework/${FRAMEWORK_NAME}.xcframework/Info.plist

      - name: Sign Framework
        env:
          FRAMEWORK_NAME: "ImageDataPicker"
        run: |
          codesign --timestamp -s "Apple Development: Michael Logothetis (J8XH79BD3A)" $RUNNER_TEMP/framework/${FRAMEWORK_NAME}.xcframework

      - name: Archive Framework
        run: |
          cd ${{ runner.temp }}/framework
          tar -czf ImageDataPicker.tgz ImageDataPicker.xcframework
          
      - name: Parse Version
        run: |
          . ci_scripts/get_version_from_git_ref.sh
          echo "major=${major}" >> $GITHUB_ENV
          echo "minor=${minor}" >> $GITHUB_ENV
          echo "patch=${patch}" >> $GITHUB_ENV
          echo "product_version=${product_version}" >> $GITHUB_ENV
        
      - name: Set Version
        run: echo "version=v${major}.${minor}.${patch}" >> $GITHUB_ENV
        
      - name: Debug
        run: echo "::notice ${{ (contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')) }}"

      - name: Publish ImageDataPicker Framework Release
        uses: softprops/action-gh-release@v2.3.2
        with:
          body: "ImageDataPicker Framework Release"
          draft: true
          files: ${{ runner.temp }}/framework/ImageDataPicker.tgz
          name: ${{ env.product_version }}
          # overwrite_files: true
          prerelease: ${{ (contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc')) }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true

      # - name: Upload application
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ImageDataPicker.tgz
      #     path: ${{ runner.temp }}/ImageDataPicker.tgz
      #     # you can also archive the entire directory
      #     # path: ${{ runner.temp }}/build
      #     retention-days: 3
name: "Build xcframework"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-15
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
  
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          # BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          FRAMEWORK_NAME: "ImageDataPicker"
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          # mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          # cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles            

      - name: build archive
        run: |
          FRAMEWORK_NAME="ImageDataPicker"
          # Cleaning the workspace cache
          xcodebuild \
              clean \
              -project "${FRAMEWORK_NAME}/${FRAMEWORK_NAME}".xcodeproj \
              -scheme ${FRAMEWORK_NAME}

          destinations=('iOS' 'iOS Simulator' 'macOS')
          archives=""

          # Create an archive for iOS devices
          for destination in "${destinations[@]}"; do
            echo "Creating archive for ${destination}..."

            output_archive=$(echo "${destination}" | tr ' ' '_')
            
            xcodebuild \
                archive \
                SKIP_INSTALL=NO \
                BUILD_LIBRARY_FOR_DISTRIBUTION=YES \
                -project "${FRAMEWORK_NAME}/${FRAMEWORK_NAME}".xcodeproj \
                -scheme ${FRAMEWORK_NAME} \
                -configuration Release \
                -destination "generic/platform=${destination}" \
                -archivePath $RUNNER_TEMP/build/${FRAMEWORK_NAME}-${output_archive}.xcarchive
    
            archives="${archives} -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-${output_archive}.xcarchive -framework ${FRAMEWORK_NAME}.framework"
          done
        

      - name: build archive
        env:
          FRAMEWORK_NAME: "ImageDataPicker"
        run: |
          # Convert the archives to .framework
          # and package them both into one xcframework
          xcodebuild \
          -create-xcframework \
          -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-iOS.xcarchive -framework ${FRAMEWORK_NAME}.framework \
          -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-iOS_Simulator.xcarchive -framework ${FRAMEWORK_NAME}.framework \
          -archive $RUNNER_TEMP/build/${FRAMEWORK_NAME}-macOS.xcarchive -framework ${FRAMEWORK_NAME}.framework \
          -output $RUNNER_TEMP/framework/${FRAMEWORK_NAME}.xcframework 

      - name: Sign Framework
        env:
          FRAMEWORK_NAME: "ImageDataPicker"
        run: |
          codesign --timestamp -s "Apple Development: Michael Logothetis (J8XH79BD3A)" $RUNNER_TEMP/framework/${FRAMEWORK_NAME}.xcframework

      - name: Archive Framework
        run: |
          cd ${{ runner.temp }}/framework
          tar -czf ImageDataPicker.tgz ImageDataPicker.xcframework

      - name: Publish (Draft) Release
        uses: softprops/action-gh-release@v2
        with:
          body: "This is a test release."
          draft: true
          files: ${{ runner.temp }}/framework/ImageDataPicker.tgz
          name: v0.0.1 (Test Release)
          overwrite_files: true
          path: ${{ runner.temp }}/ImageDataPicker.tgz
          prerelease: true
          # you can also archive the entire directory
          # path: ${{ runner.temp }}/build
          # retention-days: 3

      #- name: Upload application
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: ImageDataPicker.tgz
      #    path: ${{ runner.temp }}/ImageDataPicker.tgz
      #    # you can also archive the entire directory
      #    # path: ${{ runner.temp }}/build
      #    retention-days: 3
